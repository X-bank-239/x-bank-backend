/*
 * This file is generated by jOOQ.
 */
package com.example.xbankbackend.generated;


import com.example.xbankbackend.generated.tables.BankAccounts;
import com.example.xbankbackend.generated.tables.Payments;
import com.example.xbankbackend.generated.tables.Users;
import com.example.xbankbackend.generated.tables.records.BankAccountsRecord;
import com.example.xbankbackend.generated.tables.records.PaymentsRecord;
import com.example.xbankbackend.generated.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BankAccountsRecord> BANK_ACCOUNTS_PKEY = Internal.createUniqueKey(BankAccounts.BANK_ACCOUNTS, DSL.name("bank_accounts_pkey"), new TableField[] { BankAccounts.BANK_ACCOUNTS.ACCOUNT_ID }, true);
    public static final UniqueKey<PaymentsRecord> PAYMENTS_PKEY = Internal.createUniqueKey(Payments.PAYMENTS, DSL.name("payments_pkey"), new TableField[] { Payments.PAYMENTS.PAYMENT_ID }, true);
    public static final UniqueKey<UsersRecord> USERS_EMAIL_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_email_key"), new TableField[] { Users.USERS.EMAIL }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.USER_ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<BankAccountsRecord, UsersRecord> BANK_ACCOUNTS__FK_USER = Internal.createForeignKey(BankAccounts.BANK_ACCOUNTS, DSL.name("fk_user"), new TableField[] { BankAccounts.BANK_ACCOUNTS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<PaymentsRecord, UsersRecord> PAYMENTS__FK_RECEIVER = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("fk_receiver"), new TableField[] { Payments.PAYMENTS.RECEIVER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
    public static final ForeignKey<PaymentsRecord, UsersRecord> PAYMENTS__FK_SENDER = Internal.createForeignKey(Payments.PAYMENTS, DSL.name("fk_sender"), new TableField[] { Payments.PAYMENTS.SENDER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
}
