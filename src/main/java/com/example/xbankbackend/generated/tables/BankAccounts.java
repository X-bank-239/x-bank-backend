/*
 * This file is generated by jOOQ.
 */
package com.example.xbankbackend.generated.tables;


import com.example.xbankbackend.generated.Indexes;
import com.example.xbankbackend.generated.Keys;
import com.example.xbankbackend.generated.Public;
import com.example.xbankbackend.generated.enums.BankAccountType;
import com.example.xbankbackend.generated.tables.Users.UsersPath;
import com.example.xbankbackend.generated.tables.records.BankAccountsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BankAccounts extends TableImpl<BankAccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bank_accounts</code>
     */
    public static final BankAccounts BANK_ACCOUNTS = new BankAccounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankAccountsRecord> getRecordType() {
        return BankAccountsRecord.class;
    }

    /**
     * The column <code>public.bank_accounts.account_id</code>.
     */
    public final TableField<BankAccountsRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bank_accounts.user_id</code>.
     */
    public final TableField<BankAccountsRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bank_accounts.amount</code>.
     */
    public final TableField<BankAccountsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 4).nullable(false).defaultValue(DSL.field(DSL.raw("0.00"), SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>public.bank_accounts.account_type</code>.
     */
    public final TableField<BankAccountsRecord, BankAccountType> ACCOUNT_TYPE = createField(DSL.name("account_type"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(BankAccountType.class), this, "");

    private BankAccounts(Name alias, Table<BankAccountsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BankAccounts(Name alias, Table<BankAccountsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.bank_accounts</code> table reference
     */
    public BankAccounts(String alias) {
        this(DSL.name(alias), BANK_ACCOUNTS);
    }

    /**
     * Create an aliased <code>public.bank_accounts</code> table reference
     */
    public BankAccounts(Name alias) {
        this(alias, BANK_ACCOUNTS);
    }

    /**
     * Create a <code>public.bank_accounts</code> table reference
     */
    public BankAccounts() {
        this(DSL.name("bank_accounts"), null);
    }

    public <O extends Record> BankAccounts(Table<O> path, ForeignKey<O, BankAccountsRecord> childPath, InverseForeignKey<O, BankAccountsRecord> parentPath) {
        super(path, childPath, parentPath, BANK_ACCOUNTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BankAccountsPath extends BankAccounts implements Path<BankAccountsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BankAccountsPath(Table<O> path, ForeignKey<O, BankAccountsRecord> childPath, InverseForeignKey<O, BankAccountsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BankAccountsPath(Name alias, Table<BankAccountsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BankAccountsPath as(String alias) {
            return new BankAccountsPath(DSL.name(alias), this);
        }

        @Override
        public BankAccountsPath as(Name alias) {
            return new BankAccountsPath(alias, this);
        }

        @Override
        public BankAccountsPath as(Table<?> alias) {
            return new BankAccountsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_BANK_ACCOUNTS_USER_ID);
    }

    @Override
    public UniqueKey<BankAccountsRecord> getPrimaryKey() {
        return Keys.BANK_ACCOUNTS_PKEY;
    }

    @Override
    public List<ForeignKey<BankAccountsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BANK_ACCOUNTS__FK_USER);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.BANK_ACCOUNTS__FK_USER, null);

        return _users;
    }

    @Override
    public BankAccounts as(String alias) {
        return new BankAccounts(DSL.name(alias), this);
    }

    @Override
    public BankAccounts as(Name alias) {
        return new BankAccounts(alias, this);
    }

    @Override
    public BankAccounts as(Table<?> alias) {
        return new BankAccounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccounts rename(String name) {
        return new BankAccounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccounts rename(Name name) {
        return new BankAccounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccounts rename(Table<?> name) {
        return new BankAccounts(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccounts where(Condition condition) {
        return new BankAccounts(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccounts where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccounts where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccounts where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccounts where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccounts where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccounts where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BankAccounts where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccounts whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BankAccounts whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
