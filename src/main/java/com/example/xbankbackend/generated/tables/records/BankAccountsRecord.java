/*
 * This file is generated by jOOQ.
 */
package com.example.xbankbackend.generated.tables.records;


import com.example.xbankbackend.generated.enums.BankAccountType;
import com.example.xbankbackend.generated.tables.BankAccounts;

import java.math.BigDecimal;
import java.util.UUID;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BankAccountsRecord extends UpdatableRecordImpl<BankAccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.bank_accounts.account_id</code>.
     */
    public void setAccountId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.bank_accounts.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.bank_accounts.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.bank_accounts.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.bank_accounts.amount</code>.
     */
    public void setAmount(BigDecimal value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.bank_accounts.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.bank_accounts.account_type</code>.
     */
    public void setAccountType(BankAccountType value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.bank_accounts.account_type</code>.
     */
    public BankAccountType getAccountType() {
        return (BankAccountType) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BankAccountsRecord
     */
    public BankAccountsRecord() {
        super(BankAccounts.BANK_ACCOUNTS);
    }

    /**
     * Create a detached, initialised BankAccountsRecord
     */
    public BankAccountsRecord(UUID accountId, UUID userId, BigDecimal amount, BankAccountType accountType) {
        super(BankAccounts.BANK_ACCOUNTS);

        setAccountId(accountId);
        setUserId(userId);
        setAmount(amount);
        setAccountType(accountType);
        resetChangedOnNotNull();
    }
}
