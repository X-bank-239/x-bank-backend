/*
 * This file is generated by jOOQ.
 */
package com.example.xbankbackend.generated.tables;


import com.example.xbankbackend.generated.Keys;
import com.example.xbankbackend.generated.Public;
import com.example.xbankbackend.generated.tables.Users.UsersPath;
import com.example.xbankbackend.generated.tables.records.PaymentsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Payments extends TableImpl<PaymentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.payments</code>
     */
    public static final Payments PAYMENTS = new Payments();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaymentsRecord> getRecordType() {
        return PaymentsRecord.class;
    }

    /**
     * The column <code>public.payments.payment_id</code>.
     */
    public final TableField<PaymentsRecord, UUID> PAYMENT_ID = createField(DSL.name("payment_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payments.sender_id</code>.
     */
    public final TableField<PaymentsRecord, UUID> SENDER_ID = createField(DSL.name("sender_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payments.receiver_id</code>.
     */
    public final TableField<PaymentsRecord, UUID> RECEIVER_ID = createField(DSL.name("receiver_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.payments.amount</code>.
     */
    public final TableField<PaymentsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC(19, 4).nullable(false), this, "");

    /**
     * The column <code>public.payments.currency</code>.
     */
    public final TableField<PaymentsRecord, String> CURRENCY = createField(DSL.name("currency"), SQLDataType.VARCHAR(3).nullable(false), this, "");

    /**
     * The column <code>public.payments.payment_date</code>.
     */
    public final TableField<PaymentsRecord, OffsetDateTime> PAYMENT_DATE = createField(DSL.name("payment_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "");

    private Payments(Name alias, Table<PaymentsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Payments(Name alias, Table<PaymentsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.payments</code> table reference
     */
    public Payments(String alias) {
        this(DSL.name(alias), PAYMENTS);
    }

    /**
     * Create an aliased <code>public.payments</code> table reference
     */
    public Payments(Name alias) {
        this(alias, PAYMENTS);
    }

    /**
     * Create a <code>public.payments</code> table reference
     */
    public Payments() {
        this(DSL.name("payments"), null);
    }

    public <O extends Record> Payments(Table<O> path, ForeignKey<O, PaymentsRecord> childPath, InverseForeignKey<O, PaymentsRecord> parentPath) {
        super(path, childPath, parentPath, PAYMENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class PaymentsPath extends Payments implements Path<PaymentsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> PaymentsPath(Table<O> path, ForeignKey<O, PaymentsRecord> childPath, InverseForeignKey<O, PaymentsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private PaymentsPath(Name alias, Table<PaymentsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public PaymentsPath as(String alias) {
            return new PaymentsPath(DSL.name(alias), this);
        }

        @Override
        public PaymentsPath as(Name alias) {
            return new PaymentsPath(alias, this);
        }

        @Override
        public PaymentsPath as(Table<?> alias) {
            return new PaymentsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<PaymentsRecord> getPrimaryKey() {
        return Keys.PAYMENTS_PKEY;
    }

    @Override
    public List<ForeignKey<PaymentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.PAYMENTS__FK_RECEIVER, Keys.PAYMENTS__FK_SENDER);
    }

    private transient UsersPath _fkReceiver;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>fk_receiver</code> key.
     */
    public UsersPath fkReceiver() {
        if (_fkReceiver == null)
            _fkReceiver = new UsersPath(this, Keys.PAYMENTS__FK_RECEIVER, null);

        return _fkReceiver;
    }

    private transient UsersPath _fkSender;

    /**
     * Get the implicit join path to the <code>public.users</code> table, via
     * the <code>fk_sender</code> key.
     */
    public UsersPath fkSender() {
        if (_fkSender == null)
            _fkSender = new UsersPath(this, Keys.PAYMENTS__FK_SENDER, null);

        return _fkSender;
    }

    @Override
    public List<Check<PaymentsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("chk_amount_positive"), "((amount > (0)::numeric))", true)
        );
    }

    @Override
    public Payments as(String alias) {
        return new Payments(DSL.name(alias), this);
    }

    @Override
    public Payments as(Name alias) {
        return new Payments(alias, this);
    }

    @Override
    public Payments as(Table<?> alias) {
        return new Payments(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(String name) {
        return new Payments(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(Name name) {
        return new Payments(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Payments rename(Table<?> name) {
        return new Payments(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Condition condition) {
        return new Payments(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Payments where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Payments whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
